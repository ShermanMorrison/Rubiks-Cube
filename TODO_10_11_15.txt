Implement BigCube.scramble()

Implement BigCube.get_is_solved()

__SCRAMBLE__

Desires

    COMPLETE

    Calling BigCube.scramble() immediately starts scrambling the cube,
    even if it was in the middle of a rotation

    Details
    Cube immediately gets reset and the scramble is rendered turn-by-turn

        - Do each rotation in one 90 degree chunk
        - Do not allow non-scramble rotations to be queued during scramble
        - Re-render during scrambling
        - Once rotation queue is empty, scrambling is complete

    Implementation
        -   Make separate full-rotate function, and pop from queue for each rotation
            There is no need to process the QueuedRotations, because they
            are complete in one rotation.
        -   Issue: render() loop stops running after first do_full_rotation()
            -   Reason was that "requestAnimationFrame( render );" must be called
                to queue the next call to render()
            -   Decided to show each 90 degree rotation of the scramble- more satisfying
                to see it rather than just wait half a second for the cube to scramble.
            -

Implementation

    Ways to reset scene:

    1. Clear all objects from the scene, render a new cube.

        For a 10x10 cube, that takes 200 ms.

        Garbage collecting issue?
            Remove all Cubes from scene, set bigCube to new BigCube()
            At that point the scene has the 54 new cubes.
            But then I call RotateX(), and suddenly there are 108 cubes on the scene.

            bigCube had the references to the old Cubes, but now it points to a different set of Cubes.

            Problem was that I had bigCube and cube_container.bigCube both at once.

            Modifying cube_container.bigCube did not change bigCube.

            This is because both are just references to the object. Setting cube_container.bigCube to null
            just sets a reference to null.

            The solution is to only keep one reference to the memory holding the BigCube object.
            Changing the reference will make the previous BigCube object go out of scope, causing it to get
            garbage collected.

            The thinking behind using a container object only applies if you're wanting to modify a reference.
            If you pass in a reference variable and modify it, JavaScript is actually modifying a copy of that
            reference, which will go out of scope when you exit the function. But if you modify the actual reference
            in the parent scope directly, it will change.



    2. Reset the cube. <-- lots of work, at best save 200ms

        Resetting the cube could go hand in hand with checking if it is solved.
        Each cube object could contain its original position and orientation.
        The resetting just checks that the cubes are in the right places.

        What happens right now if you modify the BigCube.cube object?
        Nothing, the things getting rendered are the actual Cube objects.
        So the reset() method has to reset BigCube.cube to contain the right cubes,
        and then actually rotate the cubes to their correct position.


